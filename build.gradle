plugins {
    id 'java'
    id 'io.spring.dependency-management' version "1.0.10.RELEASE"
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'pl.allegro.tech.build.axion-release' version '1.12.0'
    id 'com.palantir.docker' version '0.25.0'
    id 'com.palantir.docker-run' version '0.25.0'
    id 'jp.classmethod.aws.cloudformation' version '0.41'
    id 'com.palantir.docker-compose' version '0.22.1'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
    id 'org.owasp.dependencycheck' version '6.0.3'
}

version = scmVersion.version
sourceCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

 /*   classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE'*/
    classpath 'org.owasp:dependency-check-gradle:6.0.3'','commons-io:commons-io:2.5'
}

test {
    useJUnitPlatform()
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'cmidhun'
String imageName = "${dockerHubUsernameProperty}/spring-boot-api-example:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}

import com.amazonaws.services.cloudformation.model.Capability

aws {
    region = findProperty('region') ?: 'us-east-1'
}

cloudFormation {
    stackName "$project.name-stack"
    stackParams([
            SubnetID: findProperty('subnetId') ?: '',
            ServiceName: project.name,
            ServiceVersion: project.version,
            DockerHubUsername: dockerHubUsernameProperty
    ])
    templateFile project.file("ecs.yml")
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
    }
}
tasks['sonarqube'].dependsOn test

// OWASP Dependency Check settings
dependencyCheck {

    // let's ignore errors to make builds in Jenkins more stable
    failOnError = false

    // OWASP Dependency Check plugin for Jenkins needs an XML report,
    // but humans may also need an HTML one
    format = 'ALL'

    // set up a quality gate for vulnerabilities with high severity level:
    //   let's consider that a vulnerability has a high severity level if its CVSS score is higher than 7
    //   the build is going to fail if vulnerabilities with high severity level found
    failBuildOnCVSS = 7

    // specify a list of known issues which contain:
    //   false-positives
    //   confirmed vulnerabilities which are not fixed yet, but we have a ticket for that
    suppressionFile = 'dependency-check-known-issues.xml'
}